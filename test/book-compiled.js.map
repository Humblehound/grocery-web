{"version":3,"sources":["book.js"],"names":[],"mappings":"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","file":"book-compiled.js","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\nlet mongoose = require(\"mongoose\");\nlet Book = require('../app/models/book');\n\n//Require the dev-dependencies\nlet chai = require('chai');\nlet chaiHttp = require('chai-http');\nlet server = require('../server');\nlet should = chai.should();\n\n\nchai.use(chaiHttp);\n\n//Our parent block\ndescribe('Books', () => {\n\tbeforeEach((done) => { //Before each test we empty the database\n\t\tBook.remove({}, (err) => { \n\t\t   done();\t\t   \n\t\t});\t\t\n\t});\n /*\n  * Test the /GET route\n  */\n  describe('/GET book', () => {\n\t  it('it should GET all the books', (done) => {\n\t\t\tchai.request(server)\n\t\t    .get('/book')\n\t\t    .end((err, res) => {\n\t\t\t  \tres.should.have.status(200);\n\t\t\t  \tres.body.should.be.a('array');\n\t\t\t  \tres.body.length.should.be.eql(0);\n\t\t      done();\n\t\t    });\n\t  });\n  });\n /*\n  * Test the /POST route\n  */\n  describe('/POST book', () => {\n\t  it('it should not POST a book without pages field', (done) => {\n\t  \tlet book = {\n\t  \t\ttitle: \"The Lord of the Rings\",\n\t  \t\tauthor: \"J.R.R. Tolkien\",\n\t  \t\tyear: 1954\n\t  \t}\n\t\t\tchai.request(server)\n\t\t    .post('/book')\n\t\t    .send(book)\n\t\t    .end((err, res) => {\n\t\t\t  \tres.should.have.status(200);\n\t\t\t  \tres.body.should.be.a('object');\n\t\t\t  \tres.body.should.have.property('errors');\n\t\t\t  \tres.body.errors.should.have.property('pages');\n\t\t\t  \tres.body.errors.pages.should.have.property('kind').eql('required');\n\t\t      done();\n\t\t    });\n\t  });\n\t  it('it should POST a book ', (done) => {\n\t  \tlet book = {\n\t  \t\ttitle: \"The Lord of the Rings\",\n\t  \t\tauthor: \"J.R.R. Tolkien\",\n\t  \t\tyear: 1954,\n\t  \t\tpages: 1170\n\t  \t}\n\t\t\tchai.request(server)\n\t\t    .post('/book')\n\t\t    .send(book)\n\t\t    .end((err, res) => {\n\t\t\t  \tres.should.have.status(200);\n\t\t\t  \tres.body.should.be.a('object');\n\t\t\t  \tres.body.should.have.property('message').eql('Book successfully added!');\n\t\t\t  \tres.body.book.should.have.property('title');\n\t\t\t  \tres.body.book.should.have.property('author');\n\t\t\t  \tres.body.book.should.have.property('pages');\n\t\t\t  \tres.body.book.should.have.property('year');\n\t\t      done();\n\t\t    });\n\t  });\n  });\n /*\n  * Test the /GET/:id route\n  */\n  describe('/GET/:id book', () => {\n\t  it('it should GET a book by the given id', (done) => {\n\t  \tlet book = new Book({ title: \"The Lord of the Rings\", author: \"J.R.R. Tolkien\", year: 1954, pages: 1170 });\n\t  \tbook.save((err, book) => {\n\t  \t\tchai.request(server)\n\t\t    .get('/book/' + book.id)\n\t\t    .send(book)\n\t\t    .end((err, res) => {\n\t\t\t  \tres.should.have.status(200);\n\t\t\t  \tres.body.should.be.a('object');\n\t\t\t  \tres.body.should.have.property('title');\n\t\t\t  \tres.body.should.have.property('author');\n\t\t\t  \tres.body.should.have.property('pages');\n\t\t\t  \tres.body.should.have.property('year');\n\t\t\t  \tres.body.should.have.property('_id').eql(book.id);\n\t\t      done();\n\t\t    });\n\t  \t});\n\n\t  });\n  });\n /*\n  * Test the /PUT/:id route\n  */\n  describe('/PUT/:id book', () => {\n\t  it('it should UPDATE a book given the id', (done) => {\n\t  \tlet book = new Book({title: \"The Chronicles of Narnia\", author: \"C.S. Lewis\", year: 1948, pages: 778})\n\t  \tbook.save((err, book) => {\n\t\t\t\tchai.request(server)\n\t\t\t    .put('/book/' + book.id)\n\t\t\t    .send({title: \"The Chronicles of Narnia\", author: \"C.S. Lewis\", year: 1950, pages: 778})\n\t\t\t    .end((err, res) => {\n\t\t\t\t  \tres.should.have.status(200);\n\t\t\t\t  \tres.body.should.be.a('object');\n\t\t\t\t  \tres.body.should.have.property('message').eql('Book updated!');\n\t\t\t\t  \tres.body.book.should.have.property('year').eql(1950);\n\t\t\t      done();\n\t\t\t    });\n\t\t  });\n\t  });\n  });\n /*\n  * Test the /DELETE/:id route\n  */\n  describe('/DELETE/:id book', () => {\n\t  it('it should DELETE a book given the id', (done) => {\n\t  \tlet book = new Book({title: \"The Chronicles of Narnia\", author: \"C.S. Lewis\", year: 1948, pages: 778})\n\t  \tbook.save((err, book) => {\n\t\t\t\tchai.request(server)\n\t\t\t    .delete('/book/' + book.id)\n\t\t\t    .end((err, res) => {\n\t\t\t\t  \tres.should.have.status(200);\n\t\t\t\t  \tres.body.should.be.a('object');\n\t\t\t\t  \tres.body.should.have.property('message').eql('Book successfully deleted!');\n\t\t\t\t  \tres.body.result.should.have.property('ok').eql(1);\n\t\t\t\t  \tres.body.result.should.have.property('n').eql(1);\n\t\t\t      done();\n\t\t\t    });\n\t\t  });\n\t  });\n  });\n});\n  "]}