{"version":3,"sources":["user.js"],"names":[],"mappings":"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","file":"user-compiled.js","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\nlet mongoose = require(\"mongoose\");\nlet User = require(\"../app/models/user\")\n\n//Require the dev-dependencies\nlet chai = require('chai');\nlet chaiHttp = require('chai-http');\nlet server = require('../server');\nlet should = chai.should();\nlet passwordHash = require('password-hash');\nchai.use(chaiHttp);\n\n\n//Our parent block\ndescribe('Users', () => {\n    beforeEach((done) => { //Before each test we empty the database\n        User.remove({}, (err) => {\n            done();\n        });\n    });\n\n    let user = {\n        email: \"JohnDoe@gmail.com\",\n        password: \"myAweSomePass\"\n    };\n\n    describe('Register', () => {\n        it('it should register the user', (done) => {\n            chai.request(server)\n                .post('/register')\n                .send(user)\n                .end((err, res) => {\n                        res.should.have.status(201);\n                        res.body.should.be.a('object');\n                        res.body.should.have.property('message', 'User registered successfully!');\n                        done()\n                    }\n                );\n        });\n        it('it should fail to register duplicate user', (done) => {\n\n            chai.request(server)\n                .post('/register')\n                .send(user).end()\n\n            chai.request(server)\n                .post('/register')\n                .send(user)\n                .end((err, res) => {\n                        res.should.have.status(400);\n                        res.body.should.be.a('object');\n                        res.body.should.have.property('message', 'User already exists!');\n                        done()\n                    }\n                );\n        });\n    })\n    describe('Login', () => {\n        afterEach((done) => {\n            User.remove({}, (err) => {\n                done();\n            });\n        });\n\n        let user = {\n            email: \"JohnDoe@gmail.com\",\n            password: \"myAweSomePass\"\n        };\n        it('it should fail to find the user', (done) => {\n            chai.request(server)\n                .post('/login')\n                .send(user)\n                .end((err, res) => {\n                        res.should.have.status(404);\n                        res.body.should.be.a('object');\n                        res.body.should.have.property('message', 'User not found');\n                        done()\n                    }\n                );\n        })\n        it('it should login the user', (done) => {\n            var temp = new User({email: user.email, password: passwordHash.generate(user.password)});\n            temp.save((err) => {\n                chai.request(server)\n                    .post('/login')\n                    .send(user)\n                    .end((err, res) => {\n                            res.should.have.status(200);\n                            res.body.should.be.a('object');\n                            res.body.should.have.property('message', 'User logged in successfully');\n                            res.body.should.have.property('token');\n                            done()\n                        }\n                    );\n            })\n        })\n        it('it should fail verify the password', (done) => {\n            var temp = new User({email: user.email, password: passwordHash.generate(user.password + \" \")});\n            temp.save((err) => {\n                user.password = \"temp\"\n                chai.request(server)\n                    .post('/login')\n                    .send(user)\n                    .end((err, res) => {\n                            res.should.have.status(403);\n                            res.body.should.be.a('object');\n                            res.body.should.have.property('message', 'Invalid password');\n                            done()\n                        }\n                    );\n            })\n        })\n    })\n});\n"]}