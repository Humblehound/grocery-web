{"version":3,"sources":["item.js"],"names":[],"mappings":"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","file":"item-compiled.js","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\nlet mongoose = require(\"mongoose\");\nlet Item = require('../app/models/item');\nlet User = require('../app/models/user');\n\n//Require the dev-dependencies\nlet chai = require('chai');\nlet chaiHttp = require('chai-http');\nlet server = require('../server');\nlet should = chai.should();\nlet config = require('config');\nlet jwt = require('jsonwebtoken')\n\nchai.use(chaiHttp);\n\n//Our parent block\ndescribe('Items', () => {\n\n    var token;\n\n    before((done) => {\n        var user = new User({name: \"mockUser\", password: \"mockpassword\"});\n        token = jwt.sign(user, config.secret, {\n            expiresIn: 1440 // expires in 24 hours\n        });\n        done()\n    })\n    beforeEach((done) => { //Before each test we empty the database\n        Item.remove({}, (err) => {\n            done();\n        });\n    });\n\n    /*\n     * Test the /POST route\n     */\n    describe('/POST item', () => {\n        it('it should not POST an item without a name', (done) => {\n            let item = {\n                price: 0,\n                amount: 0\n            };\n            chai.request(server)\n                .post('/item')\n                .set('x-access-token', token)\n                .send(item)\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property('errors');\n                    res.body.errors.should.have.property('name');\n                    res.body.errors.name.should.have.property('kind').eql('required');\n                    done();\n                });\n        });\n        it('it should POST an item', (done) => {\n            let owner = new User({\n                email: \"myMan@gmail.com\",\n                password: \"wtf\"\n            });\n            let item = {\n                name: 'duuude',\n                price: 0,\n                amount: 0,\n                owner: owner\n            };\n            chai.request(server)\n                .post('/item')\n                .set('x-access-token', token)\n                .send(item)\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property('message').eql('Item successfully added!');\n                    res.body.item.should.have.property('name');\n                    res.body.item.should.have.property('price');\n                    res.body.item.should.have.property('amount');\n                    res.body.item.should.have.property('owner');\n                    done();\n                });\n        });\n\n    });\n    describe('/PUT item', () => {\n        it('it should PUT an item', (done) => {\n            let item = new Item({name: \"MyMan\", price: 1.0, amount: 2})\n            item.save((err, item) => {\n                item.price = 2;\n                chai.request(server)\n                    .put('/item/' + item.id)\n                    .set('x-access-token', token)\n                    .send(item)\n                    .end((err, res) => {\n                    if(err)console.log(err);\n                    res.should.have.status(200);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property('message').eql('Item updated!');\n                    res.body.item.should.have.property('name');\n                    res.body.item.should.have.property('price').eql(2);\n                    res.body.item.should.have.property('amount').eql(2);\n                    done();\n                });\n            });\n        });\n    });\n});"]}