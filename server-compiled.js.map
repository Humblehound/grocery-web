{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["let express = require('express');\nlet app = express();\nlet mongoose = require('mongoose');\nlet morgan = require('morgan');\nlet bodyParser = require('body-parser');\nlet book = require('./app/routes/book');\nlet item = require('./app/routes/item');\nlet user = require('./app/routes/user');\nlet config = require('config'); //we load the db location from the JSON files\nlet jwt = require('jsonwebtoken')\nlet cors = require('cors')\n\n//db options\nlet options = {\n    server: {socketOptions: {keepAlive: 1, connectTimeoutMS: 30000}},\n    replset: {socketOptions: {keepAlive: 1, connectTimeoutMS: 30000}}\n};\n\n\n//db connection\nlet db_name = 'grocery';\nlet mongodb_connection_string = 'mongodb://localhost:27017/' + db_name;\n//take advantage of openshift env vars when available:\nif (process.env.OPENSHIFT_MONGODB_DB_URL) {\n    mongodb_connection_string = process.env.OPENSHIFT_MONGODB_DB_URL + db_name;\n}\n\nmongoose.connect(mongodb_connection_string, options);\nlet db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\n\napp.use(morgan('dev'))\napp.use(cors())\n\n//don't show the log when it is test\n// if(config.util.getEnv('NODE_ENV') !== 'test') {\n// \t//use morgan to log at command line\n// \tapp.use(morgan('combined')); //'combined' outputs the Apache style LOGs\n// }\n\n\n//parse application/json and look for raw text\napp.set('superSecret', config.secret); // secret variable\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.text());\napp.use(bodyParser.json({type: 'application/json'}));\n\nvar apiRoutes = express.Router();\napiRoutes.use(function (req, res, next) {\n    var token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n\n        jwt.verify(token, app.get('superSecret'), function (err, decoded) {\n            if (err) {\n                return res.json({success: false, message: 'Failed to authenticate token.'});\n            } else {\n                // if everything is good, save to request for use in other routes\n                req.decoded = decoded;\n                next();\n            }\n        });\n    } else {\n        return res.status(403).send({\n            success: false,\n            message: 'No token provided.'\n        });\n\n    }\n});\n\n\napp.get(\"/\", (req, res) => res.json({message: \"Welcome to our Bookstore!\"}));\n\napp.route(\"/login\").post(user.login);\napp.route(\"/register\").post(user.register);\n\napp.use('/user/:id', apiRoutes);\napp.route(\"/user/:id\")\n    .delete(user.deleteUser);\n\napp.use('/item', apiRoutes);\napp.route(\"/item\")\n    .post(item.postItem)\n    .get(item.getItems);\n\napp.use('/item/:id', apiRoutes);\napp.route(\"/item/:id\")\n    .get(item.getItem)\n    .delete(item.deleteItem)\n    .put(item.updateItem);\n\napp.use('/item/:id/synchronize', apiRoutes);\napp.route(\"/item/:id/synchronize\").post(item.synchronize);\n\napp.route(\"/book\")\n    .get(book.getBooks)\n    .post(book.postBook);\napp.route(\"/book/:id\")\n    .get(book.getBook)\n    .delete(book.deleteBook)\n    .put(book.updateBook);\n\n\nvar server_port = process.env.OPENSHIFT_NODEJS_PORT || 8080\nvar server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '192.168.0.223'\n\napp.listen(server_port, server_ip_address, function () {\n    console.log(\"Listening on \" + server_ip_address + \", server_port \" + server_port)\n});\n\nmodule.exports = app; // for testing"]}