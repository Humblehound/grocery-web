{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["\nlet express = require('express');\nlet app = express();\nlet mongoose = require('mongoose');\nlet morgan = require('morgan');\nlet bodyParser = require('body-parser');\nlet port = 8080;\nlet book = require('./app/routes/book');\nlet item = require('./app/routes/item');\nlet user = require('./app/routes/user');\nlet config = require('config'); //we load the db location from the JSON files\nlet jwt = require('jsonwebtoken')\n\n//db options\nlet options = { \n\t\t\t\tserver: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } }, \n                replset: { socketOptions: { keepAlive: 1, connectTimeoutMS : 30000 } } \n              }; \n\n//db connection      \nmongoose.connect(config.DBHost, options);\nlet db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\n\napp.use(morgan('dev'))\n\n//don't show the log when it is test\nif(config.util.getEnv('NODE_ENV') !== 'test') {\n\t//use morgan to log at command line\n\tapp.use(morgan('combined')); //'combined' outputs the Apache style LOGs\n}\n\n//parse application/json and look for raw text\napp.set('superSecret', config.secret); // secret variable\n\napp.use(bodyParser.json());                                     \napp.use(bodyParser.urlencoded({extended: true}));               \napp.use(bodyParser.text());                                    \napp.use(bodyParser.json({ type: 'application/json'}));\n\n\nvar apiRoutes = express.Router();\napiRoutes.use(function(req, res, next) {\n\tvar token = req.body.token || req.query.token || req.headers['x-access-token'];\n\tif (token) {\n\n\t\tjwt.verify(token, app.get('superSecret'), function(err, decoded) {\n\t\t\tif (err) {\n\t\t\t\treturn res.json({ success: false, message: 'Failed to authenticate token.' });\n\t\t\t} else {\n\t\t\t\t// if everything is good, save to request for use in other routes\n\t\t\t\treq.decoded = decoded;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t} else {\n\t\treturn res.status(403).send({\n\t\t\tsuccess: false,\n\t\t\tmessage: 'No token provided.'\n\t\t});\n\n\t}\n});\n\napp.get(\"/\", (req, res) => res.json({message: \"Welcome to our Bookstore!\"}));\n\napp.route(\"/login\").post(user.login);\napp.route(\"/register\").post(user.register);\n\napp.use('/item', apiRoutes);\napp.route(\"/item\").post(item.postItem);\n\napp.use('/item/:id', apiRoutes);\napp.route(\"/item/:id\")\n\t.get(item.getItem)\n\t.delete(item.deleteItem)\n\t.put(item.updateItem)\n\n\napp.route(\"/book\")\n\t.get(book.getBooks)\n\t.post(book.postBook);\napp.route(\"/book/:id\")\n\t.get(book.getBook)\n\t.delete(book.deleteBook)\n\t.put(book.updateBook);\n\n\napp.listen(port);\nconsole.log(\"Listening on port \" + port);\n\nmodule.exports = app; // for testing"]}