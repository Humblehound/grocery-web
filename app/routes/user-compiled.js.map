{"version":3,"sources":["user.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,QAAQ,gBAAR,CAAX;AACA,IAAI,eAAe,QAAQ,eAAR,CAAnB;AACA,IAAI,MAAM,QAAQ,cAAR,CAAV;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,SAAS,KAAT,CAAe,GAAf,EAAoB,GAApB,EAAwB;;AAEpB,QAAI,OAAO,IAAI,IAAJ,CAAS,IAAI,IAAb,CAAX;;AAEA,QAAG,CAAC,KAAK,KAAT,EAAe;AACX,YAAI,MAAJ,CAAW,GAAX;AACA,YAAI,IAAJ,CAAS,EAAC,SAAS,yBAAV,EAAqC,UAArC,EAAT;AACH;;AAED,QAAI,CAAC,KAAK,QAAV,EAAmB;AACf,YAAI,MAAJ,CAAW,GAAX;AACA,YAAI,IAAJ,CAAS,EAAC,SAAS,4BAAV,EAAwC,UAAxC,EAAT;AACH;;AAED,SAAK,OAAL,CAAa,EAAC,OAAO,KAAK,KAAb,EAAb,EAAkC,UAAS,GAAT,EAAc,YAAd,EAA2B;AACzD,YAAG,CAAC,YAAJ,EAAiB;AACb,gBAAI,MAAJ,CAAW,GAAX;AACA,mBAAO,IAAI,IAAJ,CAAS,EAAC,SAAS,gBAAV,EAA4B,UAA5B,EAAT,CAAP;AACH;;AAED,YAAG,CAAC,aAAa,MAAb,CAAoB,KAAK,QAAzB,EAAmC,aAAa,QAAhD,CAAJ,EAA8D;AAC1D,gBAAI,MAAJ,CAAW,GAAX;AACA,mBAAO,IAAI,IAAJ,CAAS,EAAC,SAAS,kBAAV,EAA8B,UAA9B,EAAT,CAAP;AACH;;AAED,YAAI,QAAQ,IAAI,IAAJ,CAAS,IAAT,EAAe,OAAO,MAAtB,EAA8B;AACtC,uBAAW,IAD2B,CACtB;AADsB,SAA9B,CAAZ;;AAIA,qBAAa,QAAb,CAAsB,OAAtB;AACA,YAAI,IAAJ,CAAS,EAAC,SAAS,6BAAV,EAAyC,MAAM,IAA/C,EAAqD,OAAO,KAA5D,EAAT;AACH,KAjBD;AAkBH;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB,GAAvB,EAA2B;;AAEvB,QAAI,OAAO,IAAI,IAAJ,CAAS,IAAI,IAAb,CAAX;;AAEA,SAAK,IAAL,CAAU,UAAC,GAAD,EAAS;AACf,YAAG,GAAH,EAAO;AACH,gBAAG,IAAI,IAAJ,IAAY,KAAf,EAAsB;AAClB,oBAAI,MAAJ,CAAW,GAAX;AACA,oBAAI,IAAJ,CAAS,EAAC,SAAS,sBAAV,EAAT;AACH,aAHD,MAGK;AACD,oBAAI,IAAJ,CAAS,GAAT;AACH;AACJ,SAPD,MAQK;AACD,gBAAI,IAAJ,CAAS,EAAC,SAAS,+BAAV,EAAT;AACH;AACJ,KAZD;AAaH;;AAED,OAAO,OAAP,GAAiB,EAAE,YAAF,EAAS,kBAAT,EAAjB","file":"user-compiled.js","sourcesContent":["let User = require('../models/user');\nlet passwordHash = require('password-hash');\nlet jwt = require('jsonwebtoken');\nlet config = require('config');\n\nfunction login(req, res){\n\n    var user = new User(req.body);\n\n    if(!user.email){\n        res.status(403);\n        res.json({message: \"Email must not be empty\", user });\n    }\n\n    if (!user.password){\n        res.status(403);\n        res.json({message: \"Password must not be empty\", user });\n    }\n\n    User.findOne({email: user.email}, function(err, databaseuser){\n        if(!databaseuser){\n            res.status(403);\n            return res.json({message: \"User not found\", user});\n        }\n\n        if(!passwordHash.verify(user.password, databaseuser.password)){\n            res.status(403);\n            return res.json({message: \"Invalid password\", user});\n        }\n\n        var token = jwt.sign(user, config.secret, {\n            expiresIn: 1440 // expires in 24 hours\n        });\n\n        databaseuser.populate('items');\n        res.json({message: \"User logged in successfully\", user: user, token: token})\n    });\n}\n\nfunction register(req, res){\n\n    var user = new User(req.body);\n\n    user.save((err) => {\n        if(err){\n            if(err.code == 11000) {\n                res.status(403);\n                res.json({message: \"User already exists!\"});\n            }else{\n                res.json(err);\n            }\n        }\n        else {\n            res.json({message: \"User registered successfully!\"});\n        }\n    });\n}\n\nmodule.exports = { login, register };"]}